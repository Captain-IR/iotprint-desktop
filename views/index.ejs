<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel='stylesheet' href='/css/style.css' />
  <title><%= title %></title>
</head>

<body>
  <div id="app">
    <div class="container">
      <h1 class="text-center"><%= title %></h1>
      <hr>
      <div class="row">
        <div class="col">
          <div class="form-group">
            <h3>Printer</h3>
            <div v-html="printerLogs" class="output">
              {{ printerLogs }}
            </div>
            <form v-if="showForm" v-on:submit.prevent>
              <label for="">Execute Pronsole Commands</label><br>
              <input v-model="cmd" type="text" class="form-control w-75 mb-3 d-inline" placeholder="ex: help">
              <button @click="sendCmd" class="btn btn-info">Send</button><br>
              <div>
                <button @click="startAuto" class="btn btn-primary">Cloud Mode</button>
                <button @click="stopAuto" class="btn btn-danger">Manual Mode</button><small> stops cloud mode</small>
              </div>
            </form>
          </div>
        </div>
        <div class="col">
          <h3>Cloud</h3>
          <div class="output">
            {{ cloudLogs }}
          </div>
        </div>
      </div>
    </div>
    <hr>
    <div class="row">
      <div class="col">
        <p class="text-center">{{ rpc }}</p>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <script>
    socket = io()

    axios.defaults.baseURL = 'http://localhost:5000/api'
    // axios.defaults.baseURL = 'https://iotprint-server.herokuapp.com/api'

    axios.defaults.headers = { 'Content-type': 'application/json' }

    var app = new Vue({
      el: '#app',
      data: {
        showForm: false,
        cmd: '',
        printerLogs: 'Verifying Packages...\n',
        cloudLogs: 'Offline',
        rpc: 'ERROR: rpc server down',
        run: true,
        oldProgress: null,
        sentCount: 0,
        jobId: ''
      },
      methods: {
        sendCmd: function () {
          socket.emit('command', this.cmd)
          this.cmd = ''
        },
        autoMode: async function () {
          socket.emit('rpcOff', { rpc: 'OFF' })
          if (this.run) {
            let res
            try {
              res = await axios.get("/job") // get the first standby job
              this.cloudLogs = res.data
              this.jobId = res.data.job._id

              if (res.status === 200) {
                const productId = res.data.job.product._id
                await axios.post('http://localhost:3000/auto', { productId }) // start the cloud process
                socket.emit('rpcOn', { rpc: 'ON' })
              }
            } catch (err) {
              console.log(err);
              setTimeout(() => {
                if (err.response) {
                  this.cloudLogs = err.response.data.message
                } else {
                  this.cloudLogs = err
                }
                this.autoMode()
              }, 5000);
            }
          }
        },
        startAuto() {
          this.run = true
          this.autoMode()
        },
        stopAuto() {
          this.run = false
          this.oldProgress = null
          setTimeout(() => {
            this.cloudLogs = 'Stopped'
          }, 7000);
        },
      },
      mounted() {
        socket.on('pronsole', (data) => {
          this.showForm = true
          this.printerLogs = this.printerLogs + '<br>' + data.stdout.replace('\r', ' ')
          console.log('Pronsole:', data);
        })

        socket.on('rpcData', (data) => {
          let rpcData = JSON.parse(data)
          this.rpc = rpcData

          if (rpcData.filename && !rpcData.progress && !this.oldProgress) {
            if (this.run) {
              socket.emit('command', 'print')
            }
          }

          if (rpcData.progress) {
            this.oldProgress = rpcData.progress
            console.log('Printing...');
            if (this.sentCount === 0) {
              axios.put(`/job/${this.jobId}`, { status: 'printing' }).then((res) => {
                this.cloudLogs = res.data
                this.sentCount = this.sentCount + 1
              }).catch((err) => {
                this.cloudLogs = err.response.data.message
              }); // change status to printing
            }
          }

          if (this.oldProgress && !rpcData.progress) {
            this.oldProgress = null
            this.sentCount = 0
            const res = axios.put(`/job/${this.jobId}`, { status: 'finished' })
              .then(res => {
                console.log(res.data)
                this.cloudLogs = res.data
              })
              .catch(err => {
                console.log(err.response.data.message)
                this.cloudLogs = res.data
              })
            socket.emit('rpcOff', { rpc: 'OFF' })
          }
        })

        // Check cloud status
        axios.get('/download').then((res) => {
          this.cloudLogs = res.data.message
        }).catch((err) => {
          console.log(err);
        });


      }
    })
  </script>
</body>

</html>
